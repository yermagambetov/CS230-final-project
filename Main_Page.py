"""
Name:     Amir Yermagambetov
CS230:    Section 1
Data:     uscities.csv
URL:

Description:

This program allows policymakers or city-planners to make informed decisions. It allows them to use interactive maps,
obtain some statistic, and visualize data with user inputs. This program mainly uses maps, bar charts, and pie chart.
"""

import streamlit as st
import pandas as pd
import folium
from streamlit_folium import st_folium
import altair as alt

APP_TITLE = 'United States: Data Explorer'
APP_SUB_TITLE = 'Pick a State To See Data'
TEXT1 = "The interactive map program is a tool that provides users with an intuitive visual representation of the " \
        "United States and its population. With a simple user interface, the program allows users to explore the " \
        "country and access information on population data for each state"
TEXT2 = "The program's interactive map feature allows users to zoom in and out, pan around, and select specific areas " \
        "of the United States. The map highlights each state and displays its population data. The population data is " \
        "shown as a color-coded overlay on top of the map, with darker colors representing higher population."
TEXT3 = "Each bar in the chart represents a state, and the length of the bar is proportional to the population of " \
        "that state. The bars are color-coded to represent different demographics, " \
        "making it easier to distinguish between states and see trends in population data."


def display_state_or_city_population(df, state_name, city_name, field_name, metric_title=f'Total Population'):
    if state_name:
        df = df[(df['state_name'] == state_name)]
        metric_title = f'Total Population of {state_name}'
        if city_name:
            df = df[(df['city'] == city_name)]
            metric_title = f'Total Population of {city_name},{state_name}'
    total = df[field_name].sum()
    st.metric(metric_title, '{:,}'.format(total))


def display_the_number_of_ciites(df, state_name):
    if state_name:
        df = df[(df['state_name'] == state_name)]
    st.metric('Number of Cities', '{:,}'.format(len(df[['city']])))


def display_avg_population(df, state_name):
    if state_name:
        df = df[(df['state_name'] == state_name)]
        population = get_population_for_state(df, state_name)
    else:
        population = df['population'].sum()
    n = len(df[['city']])
    st.metric('Average Population Per City', '{:,.2f}'.format(population / n))


def display_map(df):
    # used Folium documentation
    map = folium.Map(location=[38, -96.5], zoom_start=4, scrollWheelZoom=False, tiles='CartoDB positron')

    choropleth = folium.Choropleth(
        geo_data='pages/final_project_data/us-state-boundaries.geojson',
        data=df,
        columns=('state_name', 'population'),
        key_on='feature.properties.name',
        line_opacity=0.8,
        highlight=True
    )
    choropleth.geojson.add_to(map)

    df = df.set_index('state_name')

    for feature in choropleth.geojson.data['features']:
        state_name = feature['properties']['name']
        feature['properties']['population'] = 'Population: ' + str(
            '{:,}'.format(df.loc[state_name, 'population']) if state_name in list(df.index) else 'N/A')

    choropleth.geojson.add_child(
        folium.features.GeoJsonTooltip(['name', 'population'], labels=False)
    )

    st_map = st_folium(map, width=700, height=450)

    state_name = ''
    if st_map['last_active_drawing']:
        state_name = (st_map['last_active_drawing']['properties']['name'])
    return state_name


def get_population_for_state(df, state_name):
    df = df[(df['state_name'] == state_name)]
    total = df['population'].sum()
    return total


def populationByStateDataFrame(df):
    df = df[['state_name', 'population']]

    aset = set()
    for index in df.index:
        aset.add(df['state_name'][index])
    listOfStates = list(aset)
    listOfPopulations = []
    for i in range(len(listOfStates)):
        listOfPopulations.append(get_population_for_state(df, listOfStates[i]))
    adict = {
        'state_name': listOfStates,
        'population': listOfPopulations
    }
    dfResult = pd.DataFrame(adict)
    return dfResult


def display_top51_states(df):
    df = df.sort_values('population', ascending=False)
    rmv_outliers = st.checkbox('Remove Outliers?')
    if rmv_outliers:
        df = df[5:]
    # within this function, the design of altair chart was generated by ChatGPT. Section 1 in Word doc.
    chart = alt.Chart(df).mark_bar().encode(
        x='population',
        y=alt.Y('state_name', sort='-x'),
        color='population'
    ).properties(
        width=900,
        height=900
    )
    st.altair_chart(chart, use_container_width=True)

    selection = alt.selection_single(fields=['population'])
    chart = alt.Chart(df).mark_bar().encode(
        x=alt.X('population', axis=alt.Axis(title='population')),
        y=alt.Y('state_name', axis=alt.Axis(title='state_name')),
        color=alt.condition(selection, 'state_name', alt.value('lightgray'), legend=None)
    ).properties(
        title=f'Top 51 States by Population',
        width=400,
        heigh=700
    )
    chart = chart.configure_axis(
        labelFontSize=14,
        titleFontSize=16
    ).configure_title(
        fontSize=20,
        fontWeight='bold'
    )


def create_new_df(df1, df2, state1, state2):
    population1 = df1['population'].sum()
    population2 = df2['population'].sum()
    density1 = df1['density'].mean()
    density2 = df2['density'].mean()

    adict = {
        'state': [state1, state2],
        'population': [population1, population2],
        'density': [density1, density2]
    }
    newdf = pd.DataFrame(adict)
    return newdf


def compare_two_states(df, dfStates):
    options = st.multiselect(
        'Select two states to compare',
        dfStates,
        max_selections=2)
    if st.button('Compare!'):
        state1, state2 = options[0], options[1]
        df1 = df[(df['state_name'] == state1)]
        df2 = df[(df['state_name'] == state2)]
        # create new DataFrame to make chart
        dfChart = create_new_df(df1, df2, state1, state2)

        chart = alt.Chart(dfChart).mark_bar().encode(
            x=alt.X('population'),
            y=alt.Y('state')
        ).properties(
            width=400,
            height=200
        )
        chart2 = alt.Chart(dfChart).mark_bar().encode(
            x=alt.X('density'),
            y=alt.Y('state')
        ).properties(
            width=400,
            height=200
        )
        col1, col2 = st.columns(2, gap='large')
        with col1:
            st.markdown(f'{state1} Vs. {state2} by population')
            st.altair_chart(chart)
        with col2:
            st.markdown(f'{state1} Vs. {state2} by avg. density')
            st.altair_chart(chart2)
        st.markdown(f"By comparing these two bar charts, one can gain insights into the relationship between a "
                    f"state's population size and its average population density. It helps understand which states "
                    f"have large populations with relatively high or low population densities, and which states have "
                    f"smaller populations but higher or lower population densities. These visualizations can be "
                    f"valuable in various fields, such as urban planning, resource allocation, and policy-making.")


def main():
    st.set_page_config(APP_TITLE)
    st.title(APP_TITLE)
    st.caption(APP_SUB_TITLE)

    # LOAD DATA
    df = pd.read_csv('pages/final_project_data/uscities.csv')

    state_name = ''
    city_name = ''

    # FUNCTIONS
    dfStatesPopulation = populationByStateDataFrame(df)

    # DISPLAY FILTERS AND MAP
    state_name = display_map(dfStatesPopulation)

    # DISPLAY METRICS
    col1, col2, col3 = st.columns(3)
    with col1:
        display_state_or_city_population(df, state_name, city_name, 'population', f'Total Population')
    with col2:
        display_the_number_of_ciites(df, state_name)
    with col3:
        display_avg_population(df, state_name)

    # DISPLAY TEXT
    st.header("What's going on?")
    st.markdown(TEXT1)
    st.markdown(TEXT2)
    st.header("Is there any other insights?")
    st.markdown(TEXT3 + " **Currently the bar chart has obvious outliers, check the checkbox if you'd like to remove "
                        "them**")
    display_top51_states(dfStatesPopulation)

    st.header("Let's Compare Two States")
    compare_two_states(df, dfStatesPopulation)


main()
